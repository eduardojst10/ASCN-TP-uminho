---
- name: Create config map for mysql
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: mysql-config
        namespace: "{{ ghost_namespace }}"
        labels:
          app: "{{ mysql_app }}"
      data:
        MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
        MYSQL_HOST: "{{ mysql_host }}"
        MYSQL_PORT: "{{ mysql_port_configmap }}"
        MYSQL_USER: "{{ mysql_user }}"
        MYSQL_PASSWORD: "{{ mysql_user_password }}"
        MYSQL_DATABASE: "{{ mysql_database }}"

# Create a storage class to dynamically create the PVs, with GCS
- name: Create a storage class for mysql dynamic storage using Compute Engine CSI driver
  k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: mysql-storage
        namespace: "{{ ghost_namespace }}"
        labels:
          app: "{{ mysql_app }}"
      provisioner: pd.csi.storage.gke.io
      parameters:
        type: pd-standard
        replication-type: regional-pd # using regional cluster (consumes double PVs)
      reclaimPolicy: Delete # default is Delete. Available modes are Delete and Retain (https://kubernetes.io/docs/concepts/storage/storage-classes/#reclaim-policy)
      allowVolumeExpansion: true # this allows to expand the persistent disk volume, on the spec module
      volumeBindingMode: WaitForFirstConsumer

# Create a PVC for MySQL
- name: Create persistent volume claim (PVC) 
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: mysql-pv-claim
        namespace: "{{ ghost_namespace }}"
        labels:
          app: "{{ mysql_app }}"
      spec:
        storageClassName: mysql-storage
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 200Gi # min is 200GB for GCE persistent disk

# Create the Service for MYSQL
- name: Create mysql service (give access to database inside the cluster)
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: mysql-service
        namespace: "{{ ghost_namespace }}"
        labels:
          app: "{{ mysql_app }}"
      spec:
        type: NodePort # nodeport for regional cluster, so that nodes can communicate
        ports:
          - targetPort: "{{ mysql_port }}"
            port: "{{ mysql_port }}"
        selector:
          app: "{{ mysql_app }}"

# Deploy the MYSQL database
- name: Deploy mysql database
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ mysql_deployment }}"
        namespace: "{{ ghost_namespace }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ mysql_app }}"
        template:
          metadata:
            labels:
              app: "{{ mysql_app }}"
          spec:
            containers:
              - name: mysql-container
                image: mysql:8.0
                imagePullPolicy: "IfNotPresent"
                ports:
                  - containerPort: "{{ mysql_port }}"
                envFrom:
                  - configMapRef:
                      name: mysql-config
                volumeMounts:
                  - mountPath: /var/lib/mysql
                    name: ghostdb
                resources:
                  requests:
                    cpu: "250m"
            volumes:
              - name: ghostdb
                persistentVolumeClaim:
                  claimName: mysql-pv-claim

# Wait for the MySQL Deployment to be Available
- name: Wait for the mysql-deployment to be Available (checks every 5 secs)
  shell: sh {{ script_deployment_path }} {{ mysql_deployment }}

# Horizontal Pod Autoscalling with 1 min Pod, 10 max
- name: Create HorizontalPodAutoscaler for mysql
  k8s:
    state: present
    definition:
      apiVersion: autoscaling/v2
      kind: HorizontalPodAutoscaler
      metadata:
        name: mysql-hpa
        namespace: "{{ ghost_namespace }}"
      spec:
        maxReplicas: 10
        minReplicas: 1
        scaleTargetRef:
          apiVersion: apps/v1
          kind: Deployment
          name: "{{ mysql_deployment }}"
        metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 90 # needs to be adjusted to cluster resources